#!/usr/bin/env node

const app   = require( "../app" )
    , debug = require( "debug"  )( "projet:server" )
    , http  = require( "http"   );

// —— Get port from environment and store in Express.
const port = normalizePort( process.env.PORT || "3000" );
app.set( "port", port );

// —— HTTP server.
const server = http.createServer( app );

// —— Listen on provided port, on all network interfaces.
server.listen( port );
server.on( "error", onError );
server.on( "listening", onListening );

// —— Normalize a port into a number, string, or false.
function normalizePort( val ) {

    const port = parseInt( val, 10 );

    return isNaN( port ) ? val : port > 0 ? port : false;

}

// —— Event listener for HTTP server "error" event.
function onError( error ) {
    if ( error.syscall !== "listen" )
        throw error;

    const bind = typeof port === "string" ? `Pipe ${ port }` : `Port ${ port }`;

    // —— Handle specific listen errors with super friendly messages :)

    switch ( error.code ) {
        case "EACCES":
            console.error( `${ bind } requires elevated privileges` );
            process.exit( 1 );
        case "EADDRINUSE":
            console.error( `${ bind } is already in use` );
            process.exit( 1 );
        default:
            // —— In all other cases, throw the error, because I don't know what to do.
            throw error;
  }
}

// —— Event listener for HTTP server "listening" event.
function onListening() {

    const addr = server.address()
        , bind = typeof addr === "string" ? `pipe ${ addr }` : `port ${ addr.port }`;

    debug( `Listening on ${ bind }` );
    console.log( `Listening on http://localhost:${ addr.port }` );

}
