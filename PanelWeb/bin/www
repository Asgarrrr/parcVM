#!/usr/bin/env node

const app   = require( "../app" )
    , debug = require( "debug"  )( "projet:server" )
    , http  = require( "http"   );


const PMX = require("../classes/pmx.js");
const BDD = require("../classes/bdd.js");
const VM  = require("../classes/VM.js");
const User  = require("../classes/user.js");

( async ( ) => {

    const bdd = await new BDD( "admin", "admin", "lucaslapro_projetvm" );

    app.set( "BDD", bdd );

    //new User( bdd.getDB( ) ).CreateUser( "admin", "admin", "caruellej@hotmail.fr", "23w9j4" );

    const pmx = new PMX( process.env.APITOKEN, "192.168.64.104" );

    app.set( "pmx", pmx );

    // —— Get port from environment and store in Express.
    const port = normalizePort( process.env.PORT || "3000" );
    app.set( "port", port );

    // —— HTTP server.
    const server = http.createServer( app );

    // —— Socket.io server.
    const io = require( "socket.io" )( server );

    io.on( "connection", async ( socket ) => {

    });

    // —— Listen on provided port, on all network interfaces.
    server.listen( port );
    server.on( "error", onError );
    server.on( "listening", onListening );

    // —— Normalize a port into a number, string, or false.
    function normalizePort( val ) {

        const port = parseInt( val, 10 );

        return isNaN( port ) ? val : port > 0 ? port : false;

    }

    // —— Event listener for HTTP server "error" event.
    function onError( error ) {
        if ( error.syscall !== "listen" )
            throw error;

        const bind = typeof port === "string" ? `Pipe ${ port }` : `Port ${ port }`;

        // —— Handle specific listen errors with super friendly messages :)

        switch ( error.code ) {
            case "EACCES":
                console.error( `${ bind } requires elevated privileges` );
                process.exit( 1 );
            case "EADDRINUSE":
                console.error( `${ bind } is already in use` );
                process.exit( 1 );
            default:
                // —— In all other cases, throw the error, because I don't know what to do.
                throw error;
        }
    }

    // —— Event listener for HTTP server "listening" event.
    function onListening() {

        const addr = server.address()
            , bind = typeof addr === "string" ? `pipe ${ addr }` : `port ${ addr.port }`;

        debug( `Listening on ${ bind }` );
        console.log( `Listening on http://localhost:${ addr.port }` );

    }

})( );
